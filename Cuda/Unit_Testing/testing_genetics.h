#define UNITTEST
#include "../Earth_calculations/earthInfo.h"  // For launchCon and EarthInfo()
#include "../Genetic_Algorithm/adult.h"
//TODO: We can probably just move VVVV that include to ga_crossover.h
#include "../Runge_Kutta/runge_kuttaCUDA.cuh" // ONLY in here so I don't get errors when compiling since I am including ga_crossover.h which needs this
#include "../Genetic_Algorithm/ga_crossover.h"
#include <random>
#include <time.h>

const int genSize = 10;

// Makes a set of cudaConstants that so ga_crossover functions could be used directly and calls all the unit test functions
// Input: NA
// Output: Makes a default set of cudaConstants
bool runGeneticsUnitTests();

//TODO: 'A function that' can be removed from the headers, keep it concise
//TODO: When you have a bool (like printMask) a description is nice, but the value is the most interesting
//      I might change both printMask and Output to:

//      printMask - True: print to terminal mask values, false: don't print
// Output: True -> all masks created as expected
//         False -> some issue with mask creation (probably should identify what could go wrong)

// A function that determines if masks are being generated correctly
// Input: rng - a psuedorandom number generator used by to create masks
//        printMask - whether or not you want the numeric values contained in the mask printed
// Output: Outputs true if the masks were all created as expected or false if they weren't
//         If printMask is true, it will also print all the numeric values contained in each mask
bool createMasks(std::mt19937_64& rng, bool printMask);

//TODO: keep these standardized, pick a pattern of documentation (or look at all the other documentation) and match

//returns true if the first generation of parents is generated from a set of "random" children
//these parents cannot actually be used to create the next generation I realized after the fact because their rkParameters and elements are the defaults 
//I made a child constructor that allowed me to set the speedDiff and posDiff so it doesn't correspond to their rkParameters or elements
//The logic for the above decision was that it would make it easier to tell if the individuals were properly becoming adults by rankDistanceSorting them
bool firstParentsTest(const cudaConstants * utcConstants);

//TODO: 'with know' what?
//TODO: slight nitpick: you don't need to use the 'you' pronoun
//      code in a meta-sense allows 'you' to do lots of things, but the inclusion of utcConstants does not have much to do with 'you'
//      leaving it with: utcConstans - definition of mutation rate, thruster type, passed into generateChildrenPair
//TODO: For all of these, it would be helpful to define what 'generated correctly' means

//makes children using the different method -> not to populate a generation or anything, just to check each child creation method works as expected
//starts with two known parents with know 
// Input: rng - a random number for the mask functions
//        utcConstants - allows you to access mutation rate, thruster type, and is used by create children pair
// Output: Makes 6 different children (with thruster on and off) and with no mutations 
//         It will return true if these children were generated correctly or false if they were not
bool makeChildrenWithDifferentMethods(std::mt19937_64& rng, cudaConstants * utcConstants);

// A function that says if the tripTimes, alphas, betas, and zetas are reasonable for the different children
// Input: c1 & c2 - the children generated by a certain method in makeChildrenWithDifferentMethods
//        mask - the mask that was used to make the children
//        parentValues - a vector full of the parents' values for alpha, beta, zeta, and tripTime
//        whichMethod - 1 stands for crossOver_wholeRandom, 2 stands for crossOver_average, 3 stands for crossOver_bundleVars
//        utcConstants - so the function can access thruster type
bool checkReasonability(const Child& c1, const Child& c2, std::vector<int> & mask, double parentsValues[], int whichMethod, cudaConstants * utcConstants);

// Helper for checkReasonability
// Gets a child's value for alpha, beta, zeta, or triptime, by taking in the offset and a child
// Input: correspondingOffset - ALPHA_OFFSET, BETA_OFFSET, ZETA_OFFEST, or TRIPTIME_OFFSET 
//                              allows you to access a child's alpha, beta, zeta, or triptime
//        aChild - the Child you want information from
// Output: TODO:?
double getParamStuff(const int correspondingOffset, const Child& aChild);

//TODO: Need better headers for the below, that sounds like a lot

//Makes a set of parents and creates children from these parents -> uses callRK
bool firstFullGen(std::mt19937_64& rng, const cudaConstants * utcConstants);

//TODO: once giveRankTest and giveDistanceTest are complete, use these instead, rather than using my weird versions of these
//giveRank was broken so I threw together an inefficient giveRank type function 
//Not sure it does the same thing, but works well enough for me to be able to verify if the results seems reasonable
void wrongWayToRank(std::vector<Adult> & newAdults);
//copied giveDistance from optimization.cu and updated it as necessary to work with my other testing functions
void sortaGiveDistance(std::vector<Adult> & pool);

//sets up the mask and mutation_rate and prints how many were set to true
bool checkUTMutateMask();

//unit test version of the mutateMask function from ga_crossover
void UTmutateMask(std::mt19937_64 & rng, bool * mutateMask, double mutation_rate);


//took this directly from optimization.cu on 6/14/22 near the end of the day - will become out of date if changes made to version in optimization.cu
void stolenGiveRank(std::vector<Adult> & allAdults, const cudaConstants* cConstants);
//took this directly from optimization.cu on 6/14/22 near the end of the day - will become out of date if changes made to version in optimization.cu
void stolenGiveDistance(std::vector<Adult> & allAdults, const cudaConstants* cConstants);


#include "../Unit_Testing/testing_genetics.cpp"